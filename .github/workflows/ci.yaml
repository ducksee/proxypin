name: CI

# 添加权限配置，确保可以上传 Release 资产
permissions:
  contents: write

on:
  push:
    branches: [ "main" ]
    tags:
      - 'v*.*.*'
  pull_request:
    branches: [ "main" ]
  
  # 支持手动触发
  workflow_dispatch:

jobs:
  build-android:
    runs-on: ubuntu-latest
    continue-on-error: true

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: stable

      - name: Install dependencies
        run: flutter pub get

      - name: Build Android
        run: flutter build apk --release --split-per-abi

      - name: Upload arm64-v8a APK
        uses: actions/upload-artifact@v4
        with:
          name: app-arm64-v8a-release
          path: build/app/outputs/flutter-apk/app-arm64-v8a-release.apk

      - name: Upload armeabi-v7a APK
        uses: actions/upload-artifact@v4
        with:
          name: app-armeabi-v7a-release
          path: build/app/outputs/flutter-apk/app-armeabi-v7a-release.apk

      - name: Upload x86_64 APK
        uses: actions/upload-artifact@v4
        with:
          name: app-x86_64-release
          path: build/app/outputs/flutter-apk/app-x86_64-release.apk

  build-windows:
    runs-on: windows-latest
    continue-on-error: true

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: stable

      - name: Install dependencies
        run: flutter pub get

      - name: Build Windows
        run: flutter build windows --release

      - name: Upload Windows Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ProxyPin-Windows
          path: build/windows/x64/runner/Release/

  build-linux:
    runs-on: ubuntu-latest
    continue-on-error: true

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: stable

      - name: Install Linux build dependencies
        run: |
          sudo apt update && sudo apt upgrade
          sudo apt install -y clang cmake ninja-build pkg-config
          sudo apt install -y libgtk-3-dev
          sudo apt install -y liblzma-dev

      - name: Install dependencies
        run: flutter pub get

      - name: Build Linux
        run: flutter build linux --release

      - name: Upload Linux Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ProxyPin-Linux
          path: build/linux/x64/release/bundle/

  build-macos:
    runs-on: macos-latest
    continue-on-error: true

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: stable

      - name: Install dependencies
        run: flutter pub get

      - name: Disable macOS code signing
        run: |
          # 创建临时的构建配置，禁用代码签名
          echo "CODE_SIGNING_REQUIRED = NO" >> macos/Runner/Configs/Release.xcconfig
          echo "CODE_SIGNING_ALLOWED = NO" >> macos/Runner/Configs/Release.xcconfig
          echo "CODE_SIGN_IDENTITY = " >> macos/Runner/Configs/Release.xcconfig

      - name: Build macOS
        run: flutter build macos --release

      - name: Upload macOS Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ProxyPin-macOS
          path: build/macos/Build/Products/Release/

  build-ios:
    runs-on: macos-13
    continue-on-error: true

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: stable

      - name: Install dependencies
        run: flutter pub get

      - name: Install CocoaPods dependencies
        run: |
          cd ios
          pod install --repo-update
          cd ..

      - name: Build iOS
        run: flutter build ios --release --no-codesign
          
      - name: Create iOS IPA
        run: |
          echo "创建 IPA 文件..."
          if [ -d "build/ios/iphoneos" ]; then
            cd build/ios/iphoneos
            if [ -d "Runner.app" ]; then
              mkdir -p Payload
              cp -r Runner.app Payload/
              zip -r ProxyPin-iOS.ipa Payload/
              echo "✅ IPA 创建成功"
              ls -la ProxyPin-iOS.ipa
            else
              echo "❌ 未找到 Runner.app"
              ls -la .
              exit 1
            fi
          else
            echo "❌ 构建目录不存在"
            ls -la build/ios/ 2>/dev/null || echo "build/ios 目录不存在"
            exit 1
          fi

      - name: Upload iOS IPA
        uses: actions/upload-artifact@v4
        with:
          name: ProxyPin-iOS
          path: build/ios/iphoneos/ProxyPin-iOS.ipa

  # 测试版本发布任务（用于非标签触发的情况）
  test-release:
    if: "!startsWith(github.ref, 'refs/tags/v') && (github.event_name == 'workflow_dispatch' || github.ref == 'refs/heads/main') && always()"
    needs: [build-android, build-windows, build-linux, build-macos, build-ios]
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Get version from pubspec
        id: get_version
        run: |
          VERSION=$(grep '^version: ' pubspec.yaml | sed 's/version: //' | sed 's/+.*//')
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          echo "检测到版本: $VERSION"
        
      - name: Download all artifacts (continue on error)
        uses: actions/download-artifact@v4
        continue-on-error: true
        
      - name: Create compressed packages
        run: |
          # 检查并处理各平台的构建产物
          
          # 处理 Windows 包
          if [ -d "ProxyPin-Windows" ]; then
            echo "✅ Windows 构建成功，正在打包..."
            cd ProxyPin-Windows && zip -r ../ProxyPin-Windows-test-v${{ steps.get_version.outputs.VERSION }}.zip . && cd ..
          else
            echo "❌ Windows 构建失败，跳过打包"
          fi
          
          # 处理 Linux 包
          if [ -d "ProxyPin-Linux" ]; then
            echo "✅ Linux 构建成功，正在打包..."
            cd ProxyPin-Linux && tar -czf ../ProxyPin-Linux-test-v${{ steps.get_version.outputs.VERSION }}.tar.gz . && cd ..
          else
            echo "❌ Linux 构建失败，跳过打包"
          fi
          
          # 处理 macOS 包
          if [ -d "ProxyPin-macOS" ]; then
            echo "✅ macOS 构建成功，正在打包..."
            cd ProxyPin-macOS && zip -r ../ProxyPin-macOS-test-v${{ steps.get_version.outputs.VERSION }}.zip . && cd ..
          else
            echo "❌ macOS 构建失败，跳过打包"
          fi
          
          # 处理 Android APK 文件
          if [ -d "app-arm64-v8a-release" ]; then
            echo "✅ Android arm64-v8a 构建成功"
            mv app-arm64-v8a-release/app-arm64-v8a-release.apk ProxyPin-Android-arm64-v8a-test-v${{ steps.get_version.outputs.VERSION }}.apk
          else
            echo "❌ Android arm64-v8a 构建失败"
          fi
          
          if [ -d "app-armeabi-v7a-release" ]; then
            echo "✅ Android armeabi-v7a 构建成功"
            mv app-armeabi-v7a-release/app-armeabi-v7a-release.apk ProxyPin-Android-armeabi-v7a-test-v${{ steps.get_version.outputs.VERSION }}.apk
          else
            echo "❌ Android armeabi-v7a 构建失败"
          fi
          
          if [ -d "app-x86_64-release" ]; then
            echo "✅ Android x86_64 构建成功"
            mv app-x86_64-release/app-x86_64-release.apk ProxyPin-Android-x86_64-test-v${{ steps.get_version.outputs.VERSION }}.apk
          else
            echo "❌ Android x86_64 构建失败"
          fi
          
          # 处理 iOS IPA 文件
          if [ -d "ProxyPin-iOS" ] && [ -f "ProxyPin-iOS/ProxyPin-iOS.ipa" ]; then
            echo "✅ iOS 构建成功"
            mv ProxyPin-iOS/ProxyPin-iOS.ipa ProxyPin-iOS-test-v${{ steps.get_version.outputs.VERSION }}.ipa
          else
            echo "❌ iOS 构建失败"
          fi

      - name: Upload test build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ProxyPin-Test-Build-v${{ steps.get_version.outputs.VERSION }}
          path: |
            ProxyPin-*-test-v${{ steps.get_version.outputs.VERSION }}.*
          retention-days: 7

  release:
    if: startsWith(github.ref, 'refs/tags/v') && always()
    needs: [build-android, build-windows, build-linux, build-macos, build-ios]
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Get version from tag
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
        
      - name: Download all artifacts (continue on error)
        uses: actions/download-artifact@v4
        continue-on-error: true
        
      - name: Debug artifacts
        run: |
          echo "🔍 调试信息 - 当前目录内容:"
          ls -la .
          echo ""
          echo "🔍 查找所有构建产物:"
          find . -name "*.apk" -o -name "*.ipa" -o -name "*.zip" -o -name "*.tar.gz" 2>/dev/null | head -20 || echo "未找到构建产物"
          echo ""
          echo "🔍 查找所有目录:"
          find . -type d -maxdepth 2 2>/dev/null || echo "无法列出目录"
          echo ""
          echo "🔍 检查 artifacts 目录:"
          if [ -d "ProxyPin-Windows" ]; then echo "✅ ProxyPin-Windows 存在"; else echo "❌ ProxyPin-Windows 不存在"; fi
          if [ -d "ProxyPin-Linux" ]; then echo "✅ ProxyPin-Linux 存在"; else echo "❌ ProxyPin-Linux 不存在"; fi
          if [ -d "ProxyPin-macOS" ]; then echo "✅ ProxyPin-macOS 存在"; else echo "❌ ProxyPin-macOS 不存在"; fi
          if [ -d "ProxyPin-iOS" ]; then echo "✅ ProxyPin-iOS 存在"; else echo "❌ ProxyPin-iOS 不存在"; fi
          if [ -d "app-arm64-v8a-release" ]; then echo "✅ Android arm64-v8a 存在"; else echo "❌ Android arm64-v8a 不存在"; fi
        
      - name: Create compressed packages
        run: |
          # 检查并处理各平台的构建产物
          
          # 处理 Windows 包
          if [ -d "ProxyPin-Windows" ]; then
            echo "✅ Windows 构建成功，正在打包..."
            cd ProxyPin-Windows && zip -r ../ProxyPin-Windows-v${{ steps.get_version.outputs.VERSION }}.zip . && cd ..
          else
            echo "❌ Windows 构建失败，跳过打包"
          fi
          
          # 处理 Linux 包
          if [ -d "ProxyPin-Linux" ]; then
            echo "✅ Linux 构建成功，正在打包..."
            cd ProxyPin-Linux && tar -czf ../ProxyPin-Linux-v${{ steps.get_version.outputs.VERSION }}.tar.gz . && cd ..
          else
            echo "❌ Linux 构建失败，跳过打包"
          fi
          
          # 处理 macOS 包
          if [ -d "ProxyPin-macOS" ]; then
            echo "✅ macOS 构建成功，正在打包..."
            cd ProxyPin-macOS && zip -r ../ProxyPin-macOS-v${{ steps.get_version.outputs.VERSION }}.zip . && cd ..
          else
            echo "❌ macOS 构建失败，跳过打包"
          fi
          
          # 处理 Android APK 文件
          if [ -d "app-arm64-v8a-release" ]; then
            echo "✅ Android arm64-v8a 构建成功"
            mv app-arm64-v8a-release/app-arm64-v8a-release.apk ProxyPin-Android-arm64-v8a-v${{ steps.get_version.outputs.VERSION }}.apk
          else
            echo "❌ Android arm64-v8a 构建失败"
          fi
          
          if [ -d "app-armeabi-v7a-release" ]; then
            echo "✅ Android armeabi-v7a 构建成功"
            mv app-armeabi-v7a-release/app-armeabi-v7a-release.apk ProxyPin-Android-armeabi-v7a-v${{ steps.get_version.outputs.VERSION }}.apk
          else
            echo "❌ Android armeabi-v7a 构建失败"
          fi
          
          if [ -d "app-x86_64-release" ]; then
            echo "✅ Android x86_64 构建成功"
            mv app-x86_64-release/app-x86_64-release.apk ProxyPin-Android-x86_64-v${{ steps.get_version.outputs.VERSION }}.apk
          else
            echo "❌ Android x86_64 构建失败"
          fi
          
          # 处理 iOS IPA 文件
          if [ -d "ProxyPin-iOS" ] && [ -f "ProxyPin-iOS/ProxyPin-iOS.ipa" ]; then
            echo "✅ iOS 构建成功"
            mv ProxyPin-iOS/ProxyPin-iOS.ipa ProxyPin-iOS-v${{ steps.get_version.outputs.VERSION }}.ipa
          else
            echo "❌ iOS 构建失败"
          fi

      - name: Prepare file list for release
        id: file_list
        run: |
          file_count=0
          
          echo "🔍 准备文件列表..."
          
          # 使用 heredoc 方式输出多行文件列表到 GITHUB_OUTPUT
          {
            echo "files<<EOF"
            
            # 检查各平台文件是否存在并添加到文件列表
            if [ -f "ProxyPin-Windows-v${{ steps.get_version.outputs.VERSION }}.zip" ]; then
              echo "ProxyPin-Windows-v${{ steps.get_version.outputs.VERSION }}.zip"
              file_count=$((file_count + 1))
              echo "✅ Windows: ProxyPin-Windows-v${{ steps.get_version.outputs.VERSION }}.zip"
            else
              echo "❌ Windows: ProxyPin-Windows-v${{ steps.get_version.outputs.VERSION }}.zip 不存在"
            fi
            
            if [ -f "ProxyPin-Linux-v${{ steps.get_version.outputs.VERSION }}.tar.gz" ]; then
              echo "ProxyPin-Linux-v${{ steps.get_version.outputs.VERSION }}.tar.gz"
              file_count=$((file_count + 1))
              echo "✅ Linux: ProxyPin-Linux-v${{ steps.get_version.outputs.VERSION }}.tar.gz"
            else
              echo "❌ Linux: ProxyPin-Linux-v${{ steps.get_version.outputs.VERSION }}.tar.gz 不存在"
            fi
            
            if [ -f "ProxyPin-macOS-v${{ steps.get_version.outputs.VERSION }}.zip" ]; then
              echo "ProxyPin-macOS-v${{ steps.get_version.outputs.VERSION }}.zip"
              file_count=$((file_count + 1))
              echo "✅ macOS: ProxyPin-macOS-v${{ steps.get_version.outputs.VERSION }}.zip"
            else
              echo "❌ macOS: ProxyPin-macOS-v${{ steps.get_version.outputs.VERSION }}.zip 不存在"
            fi
            
            if [ -f "ProxyPin-Android-arm64-v8a-v${{ steps.get_version.outputs.VERSION }}.apk" ]; then
              echo "ProxyPin-Android-arm64-v8a-v${{ steps.get_version.outputs.VERSION }}.apk"
              file_count=$((file_count + 1))
              echo "✅ Android arm64-v8a: ProxyPin-Android-arm64-v8a-v${{ steps.get_version.outputs.VERSION }}.apk"
            else
              echo "❌ Android arm64-v8a: ProxyPin-Android-arm64-v8a-v${{ steps.get_version.outputs.VERSION }}.apk 不存在"
            fi
            
            if [ -f "ProxyPin-Android-armeabi-v7a-v${{ steps.get_version.outputs.VERSION }}.apk" ]; then
              echo "ProxyPin-Android-armeabi-v7a-v${{ steps.get_version.outputs.VERSION }}.apk"
              file_count=$((file_count + 1))
              echo "✅ Android armeabi-v7a: ProxyPin-Android-armeabi-v7a-v${{ steps.get_version.outputs.VERSION }}.apk"
            else
              echo "❌ Android armeabi-v7a: ProxyPin-Android-armeabi-v7a-v${{ steps.get_version.outputs.VERSION }}.apk 不存在"
            fi
            
            if [ -f "ProxyPin-Android-x86_64-v${{ steps.get_version.outputs.VERSION }}.apk" ]; then
              echo "ProxyPin-Android-x86_64-v${{ steps.get_version.outputs.VERSION }}.apk"
              file_count=$((file_count + 1))
              echo "✅ Android x86_64: ProxyPin-Android-x86_64-v${{ steps.get_version.outputs.VERSION }}.apk"
            else
              echo "❌ Android x86_64: ProxyPin-Android-x86_64-v${{ steps.get_version.outputs.VERSION }}.apk 不存在"
            fi
            
            if [ -f "ProxyPin-iOS-v${{ steps.get_version.outputs.VERSION }}.ipa" ]; then
              echo "ProxyPin-iOS-v${{ steps.get_version.outputs.VERSION }}.ipa"
              file_count=$((file_count + 1))
              echo "✅ iOS: ProxyPin-iOS-v${{ steps.get_version.outputs.VERSION }}.ipa"
            else
              echo "❌ iOS: ProxyPin-iOS-v${{ steps.get_version.outputs.VERSION }}.ipa 不存在"
            fi
            
            echo "EOF"
          } >> $GITHUB_OUTPUT
          
          echo ""
          echo "📊 文件统计: 找到 $file_count 个文件"
          
          if [ $file_count -eq 0 ]; then
            echo "⚠️ 警告: 没有找到任何构建产物文件！"
            echo "🔍 当前目录所有文件:"
            ls -la
          fi
          
          echo "file_count=$file_count" >> $GITHUB_OUTPUT

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: ProxyPin v${{ steps.get_version.outputs.VERSION }}
          draft: false
          prerelease: false
          generate_release_notes: true
          files: ${{ steps.file_list.outputs.files }}
          fail_on_unmatched_files: false
          body: |
            ## ProxyPin v${{ steps.get_version.outputs.VERSION }}
            
            ### 📊 构建统计
            - 成功构建的平台数量: ${{ steps.file_list.outputs.file_count }}
            - 总平台数量: 7
            
            ### 🔧 构建状态
            - Android: ${{ needs.build-android.result == 'success' && '✅ 成功' || '❌ 失败' }}
            - Windows: ${{ needs.build-windows.result == 'success' && '✅ 成功' || '❌ 失败' }}
            - Linux: ${{ needs.build-linux.result == 'success' && '✅ 成功' || '❌ 失败' }}
            - macOS: ${{ needs.build-macos.result == 'success' && '✅ 成功' || '❌ 失败' }}
            - iOS: ${{ needs.build-ios.result == 'success' && '✅ 成功' || '❌ 失败' }}
            
            ### 📱 下载说明
            - **Android APK**: 选择适合您设备架构的 APK 文件
              - `arm64-v8a`: 适用于大多数现代 Android 设备
              - `armeabi-v7a`: 适用于较老的 Android 设备
              - `x86_64`: 适用于 x86 架构的 Android 设备/模拟器
            - **Windows**: 下载 ZIP 文件，解压后运行 `proxypin.exe`
            - **Linux**: 下载 tar.gz 文件，解压后运行可执行文件
            - **macOS**: 下载 ZIP 文件，解压后可能需要在系统设置中允许运行
            - **iOS**: 下载 IPA 文件，需要自行签名后安装
            
            ### ⚠️ 注意事项
            - macOS 和 iOS 版本未签名，首次运行需要系统授权
            - 如果某个平台构建失败，对应文件不会出现在此次发布中
            - 所有版本都经过容错处理，确保最大兼容性
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Release Summary
        run: |
          echo "🎉 Release 创建完成！"
          echo "📦 已上传 ${{ steps.file_list.outputs.file_count }} 个文件"
          echo "🔗 Release 链接: https://github.com/${{ github.repository }}/releases/tag/${{ github.ref_name }}"